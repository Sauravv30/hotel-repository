/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.5.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.hrs.hotel.api;

import com.hrs.hotel.model.Room;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-01-29T08:47:04.694502800+05:30[Asia/Calcutta]")
@Validated
@Tag(name = "room", description = "Room api")
public interface RoomApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /room/add : Book room.
     * Book room.
     *
     * @param room Update room details (optional)
     * @return Successful operation (status code 201)
     *         or Invalid ID supplied (status code 400)
     *         or Room not found (status code 404)
     *         or Validation exception (status code 405)
     */
    @Operation(
        operationId = "addRoomDetails",
        summary = "Book room.",
        description = "Book room.",
        tags = { "room" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Room.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
            @ApiResponse(responseCode = "404", description = "Room not found"),
            @ApiResponse(responseCode = "405", description = "Validation exception")
        },
        security = {
            @SecurityRequirement(name = "petstore_auth", scopes={ "write:pets", "read:pets" })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/room/add",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Room> addRoomDetails(
        @Parameter(name = "Room", description = "Update room details") @Valid @RequestBody(required = false) Room room
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"number\" : \"number\", \"booked\" : false, \"id\" : 2, \"roomType\" : \"SINGLE\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /room/book/{roomId}/{status} : Book hotel room.
     * Book hotel room.
     *
     * @param roomId room to be booked (required)
     * @param status Set room status either booked or cancelled (required)
     * @return Successful operation (status code 200)
     *         or Invalid ID supplied (status code 400)
     *         or Room not found (status code 404)
     *         or Validation exception (status code 405)
     */
    @Operation(
        operationId = "bookHotelRoom",
        summary = "Book hotel room.",
        description = "Book hotel room.",
        tags = { "room" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Room.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
            @ApiResponse(responseCode = "404", description = "Room not found"),
            @ApiResponse(responseCode = "405", description = "Validation exception")
        },
        security = {
            @SecurityRequirement(name = "petstore_auth", scopes={ "write:pets", "read:pets" })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/room/book/{roomId}/{status}",
        produces = { "application/json" }
    )
    default ResponseEntity<Room> bookHotelRoom(
        @Parameter(name = "roomId", description = "room to be booked", required = true, in = ParameterIn.PATH) @PathVariable("roomId") Long roomId,
        @Parameter(name = "status", description = "Set room status either booked or cancelled", required = true, in = ParameterIn.PATH) @PathVariable("status") String status
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"number\" : \"number\", \"booked\" : false, \"id\" : 2, \"roomType\" : \"SINGLE\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /room/{roomId} : Get room details.
     * Get room details.
     *
     * @param roomId roomId to be fetched (required)
     * @return Successful operation (status code 200)
     *         or Invalid ID supplied (status code 400)
     *         or Room not found (status code 404)
     *         or Validation exception (status code 405)
     */
    @Operation(
        operationId = "getRoomDetails",
        summary = "Get room details.",
        description = "Get room details.",
        tags = { "room" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Room.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
            @ApiResponse(responseCode = "404", description = "Room not found"),
            @ApiResponse(responseCode = "405", description = "Validation exception")
        },
        security = {
            @SecurityRequirement(name = "petstore_auth", scopes={ "write:pets", "read:pets" })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/room/{roomId}",
        produces = { "application/json" }
    )
    default ResponseEntity<Room> getRoomDetails(
        @Parameter(name = "roomId", description = "roomId to be fetched", required = true, in = ParameterIn.PATH) @PathVariable("roomId") Long roomId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"number\" : \"number\", \"booked\" : false, \"id\" : 2, \"roomType\" : \"SINGLE\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /room/update/{roomId} : Book room.
     * Book room.
     *
     * @param roomId roomId to be fetched (required)
     * @param room Update room details (optional)
     * @return Successful operation (status code 200)
     *         or Invalid ID supplied (status code 400)
     *         or Room not found (status code 404)
     *         or Validation exception (status code 405)
     */
    @Operation(
        operationId = "updateRoomDetails",
        summary = "Book room.",
        description = "Book room.",
        tags = { "room" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Room.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
            @ApiResponse(responseCode = "404", description = "Room not found"),
            @ApiResponse(responseCode = "405", description = "Validation exception")
        },
        security = {
            @SecurityRequirement(name = "petstore_auth", scopes={ "write:pets", "read:pets" })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/room/update/{roomId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Room> updateRoomDetails(
        @Parameter(name = "roomId", description = "roomId to be fetched", required = true, in = ParameterIn.PATH) @PathVariable("roomId") Long roomId,
        @Parameter(name = "Room", description = "Update room details") @Valid @RequestBody(required = false) Room room
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"number\" : \"number\", \"booked\" : false, \"id\" : 2, \"roomType\" : \"SINGLE\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
